<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>瀑布流布局以及懒加载实现-原生js以及vue</title>
      <link href="2021/05/15/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80%E4%BB%A5%E5%8F%8A%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0-%E5%8E%9F%E7%94%9Fjs%E4%BB%A5%E5%8F%8Avue/"/>
      <url>2021/05/15/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80%E4%BB%A5%E5%8F%8A%E6%87%92%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0-%E5%8E%9F%E7%94%9Fjs%E4%BB%A5%E5%8F%8Avue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> web前端 </category>
          
          <category> 初级 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 移动端 </tag>
            
            <tag> rem </tag>
            
            <tag> flexible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue非父子组件通信-兄弟组件通信-中央事件总线</title>
      <link href="2021/05/15/vue%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E4%B8%AD%E5%A4%AE%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
      <url>2021/05/15/vue%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1-%E4%B8%AD%E5%A4%AE%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>on要先于emit被执行，否则第一次值监听不到</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> bus </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eCharts入门</title>
      <link href="2021/05/15/eCharts%E5%85%A5%E9%97%A8/"/>
      <url>2021/05/15/eCharts%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p> eCharts快速上手，分为5个步骤</p></blockquote><ul><li>步骤1：引入echarts.js文件</li><li>步骤2：准备一个呈现图表的盒子</li><li>步骤3：初始化echarts实例对象</li><li>步骤4：准备配置项</li><li>步骤5：将配置项设置给echarts实例对象<span id="more"></span></li></ul><h3 id="步骤一：引入echarts-js文件"><a href="#步骤一：引入echarts-js文件" class="headerlink" title="步骤一：引入echarts.js文件"></a>步骤一：引入echarts.js文件</h3><blockquote><p>vue中通过npm 安装echarts 依赖<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install echarts --save</span><br></pre></td></tr></table></figure><br>在main.js中全局引入/或者按需引入<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/lib/echarts&#x27;</span></span><br><span class="line"><span class="comment">// 引入柱状图</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/chart/bar&#x27;</span></span><br><span class="line"><span class="comment">// // 引入提示框和标题组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/tooltip&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;echarts/lib/component/title&#x27;</span></span><br></pre></td></tr></table></figure><br>通过标签方式直接引入构建好的 echarts 文件<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="步骤二：准备一个呈现图表的具备宽高的盒子"><a href="#步骤二：准备一个呈现图表的具备宽高的盒子" class="headerlink" title="步骤二：准备一个呈现图表的具备宽高的盒子"></a>步骤二：准备一个呈现图表的具备宽高的盒子</h3><blockquote><p>html文件中<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><br>vue中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span><br><span class="line">&lt;div ref&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤三：初始化echarts实例对象"><a href="#步骤三：初始化echarts实例对象" class="headerlink" title="步骤三：初始化echarts实例对象"></a>步骤三：初始化echarts实例对象</h3><blockquote></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"> <span class="comment">// 引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts/lib/echarts&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;FansIndex&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// MapDemo</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  created () &#123;&#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">this</span>.$refs.main)</span><br><span class="line">    <span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line">    <span class="keyword">var</span> option = &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line">        text: <span class="string">&#x27;ECharts 入门示例&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      tooltip: &#123;&#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        data: [<span class="string">&#x27;销量&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: [<span class="string">&#x27;衬衫&#x27;</span>, <span class="string">&#x27;羊毛衫&#x27;</span>, <span class="string">&#x27;雪纺衫&#x27;</span>, <span class="string">&#x27;裤子&#x27;</span>, <span class="string">&#x27;高跟鞋&#x27;</span>, <span class="string">&#x27;袜子&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;&#125;,</span><br><span class="line">      series: [&#123;</span><br><span class="line">        name: <span class="string">&#x27;销量&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        data: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">    myChart.setOption(option)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="步骤四：-准备配置项"><a href="#步骤四：-准备配置项" class="headerlink" title="步骤四： 准备配置项"></a>步骤四： 准备配置项</h3><blockquote><p>配置项可以动态设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure><h3 id="步骤五：将配置项设置给echarts实例对象"><a href="#步骤五：将配置项设置给echarts实例对象" class="headerlink" title="步骤五：将配置项设置给echarts实例对象"></a>步骤五：将配置项设置给echarts实例对象</h3><blockquote><p>实例对象的setOption方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(option)</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="echarts自适应的实现？"><a href="#echarts自适应的实现？" class="headerlink" title="echarts自适应的实现？"></a>echarts自适应的实现？</h4><ul><li>resize<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听window窗口大小变化的事件</span></span><br><span class="line">  <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;window.onresize...&#x27;)</span></span><br><span class="line">    <span class="comment">// 调用echarts实例对象的resize方法</span></span><br><span class="line">    myCharts.resize()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="通用配置项"><a href="#通用配置项" class="headerlink" title="通用配置项"></a>通用配置项</h4><blockquote><p><a href="https://echarts.apache.org/zh/option.html#title">配置项文档</a></p></blockquote></li><li>x轴 y轴 数据 类目轴 数值轴—-xAxis yAxis</li><li>图表距离x轴 y轴 位置—-grid</li><li>标题 —-title</li><li>图表类型 柱状图 折线图 饼图 散点图 地图 —- series<h4 id="常见样式属性配置"><a href="#常见样式属性配置" class="headerlink" title="常见样式属性配置"></a>常见样式属性配置</h4></li><li>折线图 直线 曲线</li><li>柱状图 图例 大小 宽高 间距</li><li><h4 id="常见动画属性配置"><a href="#常见动画属性配置" class="headerlink" title="常见动画属性配置"></a>常见动画属性配置</h4><h4 id="如何实现动态渲染数据"><a href="#如何实现动态渲染数据" class="headerlink" title="如何实现动态渲染数据"></a>如何实现动态渲染数据</h4><blockquote><p>截取数据，分成几个数据组，利用定时器，每次渲染不同数据，重复轮回即可</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eCharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios配置取消重复请求模式</title>
      <link href="2021/05/15/axios%E9%85%8D%E7%BD%AE%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/05/15/axios%E9%85%8D%E7%BD%AE%E5%8F%96%E6%B6%88%E9%87%8D%E5%A4%8D%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>效果：避免发出相同的请求，上一个请求成功之后，下一个重复请求才能被发送，即同一个请求只会有一个处于pending状态</p></blockquote><span id="more"></span><blockquote><p>使用CancelToken.source工厂创建一个取消令牌：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">var</span> source = CancelToken.source()</span><br><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Request canceled&#x27;</span>, thrown.message)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//取消请求（消息参数是可选的）</span></span><br><span class="line">source.cancel(<span class="string">&#x27;操作被用户取消。&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过将执行器函数传递给CancelToken构造函数来创建取消令牌：（拦截器中统一配置用的这种方法 new）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken</span><br><span class="line"><span class="keyword">var</span> cancel</span><br><span class="line">axios.get(<span class="string">&#x27;/user/12345&#x27;</span>,&#123;</span><br><span class="line">   cancelToken：<span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//一个执行器函数接收一个取消函数作为参数</span></span><br><span class="line">     cancel = c</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">clear();</span><br></pre></td></tr></table></figure><blockquote><p>拦截器里统一处理取消重复请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">let</span> pending = []; <span class="comment">//声明一个数组用于存储每个ajax请求的取消函数和ajax标识</span></span><br><span class="line"><span class="keyword">let</span> cancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">let</span> removePending = <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> pending)&#123; <span class="comment">// pending是数组</span></span><br><span class="line">        <span class="keyword">if</span>(pending[index].u === config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method) &#123; <span class="comment">//当当前请求在数组中存在时执行函数体</span></span><br><span class="line">            pending[index].cancel(); <span class="comment">//执行取消操作</span></span><br><span class="line">            pending.splice(index, <span class="number">1</span>); <span class="comment">//把这条记录从数组中移除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  方式二 没有返回空数组</span></span><br><span class="line">    <span class="keyword">let</span> cur = pending.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.u === config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method)</span><br><span class="line">    <span class="keyword">if</span>(cur.length)&#123; </span><br><span class="line">      cur[<span class="number">0</span>].cancel()</span><br><span class="line">      pending = pending.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.u !== config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方式三</span></span><br><span class="line">    <span class="keyword">let</span> index = pending.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.u === config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method)</span><br><span class="line">    <span class="keyword">if</span>(index !== -<span class="number">1</span>)&#123;</span><br><span class="line">      pending[index].cancel()</span><br><span class="line">      pending.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123; <span class="comment">// config 发送的请求配置参数等内容</span></span><br><span class="line">     removePending(config); <span class="comment">//在一个ajax发送前执行一下取消操作</span></span><br><span class="line">     config.cancelToken = <span class="keyword">new</span> cancelToken(<span class="function">(<span class="params">c</span>)=&gt;</span>&#123; <span class="comment">// c 取消函数</span></span><br><span class="line">        <span class="comment">// 这里的ajax标识是用请求地址&amp;请求方式拼接的字符串，也可以选择其他的一些方式</span></span><br><span class="line">        pending.push(&#123; <span class="attr">u</span>: config.url + <span class="string">&#x27;&amp;&#x27;</span> + config.method, <span class="attr">cancel</span>: c &#125;);  </span><br><span class="line">    &#125;);</span><br><span class="line">     <span class="keyword">return</span> config;</span><br><span class="line">   &#125;，error =&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">   &#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 这里不移出 响应成功之后 pending里还有 下次请求会一直被取消，就不能再次请求这个</span></span><br><span class="line">      removePending(res.config);  <span class="comment">//在一个ajax响应后再执行取消操作，把已经完成的请求从pending中移除</span></span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">   &#125;，error =&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">data</span>: &#123; &#125; &#125;; 返回一个空对象，主要是防止控制台报错</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端导入导出实现方式</title>
      <link href="2021/05/15/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>2021/05/15/%E5%89%8D%E7%AB%AF%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>后端一般是异步导入，如果前端需要获取导入是否后台处理完成并前端展示数据，则后台应另外提供查询导入状态接口，轮询状态接口，利用定时器轮询</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> VUE </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 导入,导出 </tag>
            
            <tag> elementUi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何开始移动端项目</title>
      <link href="2021/05/15/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>2021/05/15/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>从0开始一个移动端的项目，vue-cli创建项目，以及原生项目，会用到flexible＋rem＋sass＋@media技术</p><span id="more"></span><h3 id="原始方式"><a href="#原始方式" class="headerlink" title="原始方式:"></a>原始方式:</h3><ul><li><p>首先html页面script标签引入flexible.js，原理是将屏幕分成10等份，每一份作为当前屏幕下的1rem也就是html根字体大小的值，例如iphone6/7/8是375px则此时1rem等于37.5px</p></li><li><p>对body进行设置，根据设计稿，设计稿是1080px，则限制基础1rem为108px，body的max-width则为1080px，min-width限制为320px可根据要求来，同时width设置为1080/108rem.就是10rem，同时body要居中显示</p></li><li><p>利用媒体查询限制大于1080px屏幕下html字体大小不再变化</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1080px</span>;</span><br><span class="line">    <span class="attribute">width</span>: toRem(<span class="number">1080px</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="comment">// background-color: pink;</span></span><br><span class="line">    <span class="attribute">font-size</span>: toRem(<span class="number">40px</span>);</span><br><span class="line">    <span class="attribute">font-family</span>: FZLanTingHeiS-R-GB;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#020202</span>;</span><br><span class="line">    <span class="comment">// 去除a标签高亮</span></span><br><span class="line">    -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  1080px设计稿</span></span><br><span class="line"><span class="comment">// 当屏幕大于1080px的时候html字体大小就不再变化</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1080px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">108px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>css使用sass预处理器，下载vscode插件easysass可将.scss文件同步转成.css文件,.scss文件中进行rem转换设置以及浏览器私有前缀设置</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理兼容性问题，添加私有前缀 前缀</span></span><br><span class="line"><span class="keyword">@mixin</span> webkit (<span class="variable">$type</span>, <span class="variable">$value</span>)&#123;</span><br><span class="line">    -webkit-#&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    -moz-#&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    -ms-#&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    -o-#&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line">    <span class="comment">// box-shadow: 0 0 18px rgba(0,0,0,.2);  </span></span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> webkitA (<span class="variable">$type</span>, <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="comment">// background: -webkit-linear-gradient(#17a8fa, #108dd9);</span></span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: -webkit-#&#123;<span class="variable">$value</span>&#125;;</span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: -moz-#&#123;<span class="variable">$value</span>&#125;;</span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: -ms-#&#123;<span class="variable">$value</span>&#125;;</span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: -o-#&#123;<span class="variable">$value</span>&#125;;</span><br><span class="line">    #&#123;<span class="variable">$type</span>&#125;: <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@function</span> toRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">    <span class="comment">//$px为需要转换的字号</span></span><br><span class="line">    <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="number">108px</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用时</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: toRem(<span class="number">1080px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关于在1080px下的元素字体在小屏幕下应该小于12px但仍然按照12px显示的问题，利用transform:scale()进行解决</p><ul><li>简单计算举例，例如1080px某元素font-size为30px，则其在375px屏幕下font-size应该为30/1080*375=10.42px，但实际chrome浏览器最小显示的文字大小就为12px，所以应将12px缩放到10.42px也就是缩放比例为10.42/12 = 0.868<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: toRem(<span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">0.868</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>但此时大屏幕下也会被缩放，所以要限制在需要缩放的频幕下才添加缩放字体的样式，所以1080px下的30px大小的字体在屏幕为12*1080/30=432px屏幕下字体大小为12px，小于432px的屏幕才需要缩放，可以利用媒体查询，而不必使用js判断屏幕大小进行设置<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: toRem(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span>(<span class="attribute">max-width</span>:<span class="number">432px</span>)&#123;</span><br><span class="line">  <span class="selector-class">.class</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.868</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>后续一些微调样式也可用媒体查询微调小屏幕下的样式问题</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> rem </tag>
            
            <tag> flexible </tag>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便</title>
      <link href="2021/03/21/%E9%9A%8F%E4%BE%BF/"/>
      <url>2021/03/21/%E9%9A%8F%E4%BE%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> web前端 </category>
          
          <category> 初级 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 移动端 </tag>
            
            <tag> rem </tag>
            
            <tag> flexible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue动态路由权限实现方案</title>
      <link href="2021/03/21/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
      <url>2021/03/21/vue%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%9D%83%E9%99%90%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>总体思路：前端写好路由表，分为默认路由和需要相应权限生成的动态路由，后端返回登录用户的角色，前端将获取到的角色信息与动态路由权限相匹配，匹配到的进行展示渲染菜单栏即可</p><span id="more"></span><p>1.前端在本地写好路由表，以及每个路由对应的角色，也就是哪些角色可以看到这个菜单/路由；<br>在router/index.js中设置路由<br>利用到了router的meta属性，对应的哪些角色可以看到这个菜单:role属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js中设置路由</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defaultRouterMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;login&quot;</span>, <span class="comment">// 路由重定向</span></span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;主页&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Login&quot;</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;登录&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/login&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;控制台&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;console&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;Index&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;首页&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/home&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404页面</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/page404&quot;</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;404&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;404&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&quot;404&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/404.vue&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态路由</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">  <span class="comment">// 信息管理</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/info&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;Info&quot;</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      role: [<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>], <span class="comment">//权限所需角色，当前菜单哪些角色能看到</span></span><br><span class="line">      <span class="comment">// system: &#x27;infoSystem&#x27;,//自定义属性</span></span><br><span class="line">      title: <span class="string">&quot;信息管理&quot;</span>, <span class="comment">//左侧菜单栏显示文字</span></span><br><span class="line">      icon: <span class="string">&quot;info&quot;</span> <span class="comment">//左侧菜单栏图标</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: Layout,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/infoIndex&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;InfoIndex&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          <span class="comment">// keepAlive: true,//是否缓存</span></span><br><span class="line">          role: [<span class="string">&#x27;sale&#x27;</span>],</span><br><span class="line">          title: <span class="string">&quot;信息列表&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/info/index&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&quot;/infoCategory&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;InfoCategory&quot;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          <span class="comment">// keepAlive: true,</span></span><br><span class="line">          role: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">          title: <span class="string">&quot;信息分类&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/info/category&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// path: &quot;/infoDetail/:id/:title&quot;,</span></span><br><span class="line">        path: <span class="string">&quot;/infoDetail&quot;</span>,</span><br><span class="line">        name: <span class="string">&quot;InfoDetail&quot;</span>,</span><br><span class="line">        hidden: <span class="literal">true</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          <span class="comment">// keepAlive: true,//缓存之后点开内容无变化，所以缓存active生命周期</span></span><br><span class="line">          role: [<span class="string">&#x27;user&#x27;</span>],</span><br><span class="line">          title: <span class="string">&quot;信息详情&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/info/detail&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//404页面放到最后</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    redirect: <span class="string">&quot;/404&quot;</span>,</span><br><span class="line">    hidden: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: defaultRouterMap <span class="comment">//默认初始显示路由，不需要任何权限</span></span><br><span class="line">  <span class="comment">// .concat(asyncRouterMap)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>2.登录的时候，向后端请求得到登录用户的角色(管理者、普通用户)；<br>可在vueX中，store/index.js里面设置，actions异步接口处理获取登录角色，提交mutation，设置state.roles为接口获取到的路由角色例如[‘user’]，与router中的动态路由匹配，匹配上就通过在actions里面异步创建路由， </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store模块处理 permission.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; getUserRole &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/user&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; asyncRouterMap, defaultRouterMap&#125; <span class="keyword">from</span> <span class="string">&quot;@/router/index&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPermission</span>(<span class="params">role,router</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// console.log(role)//登录用户角色[&quot;sale&quot;,&quot;manager&quot;]</span></span><br><span class="line">  <span class="comment">// console.log(router)//路由配置[&quot;sale&quot;]</span></span><br><span class="line">  <span class="keyword">if</span>(router.meta &amp;&amp; router.meta.role)&#123;</span><br><span class="line">    <span class="keyword">return</span> role.some(<span class="function"><span class="params">item</span> =&gt;</span> router.meta.role.indexOf(item) !== -<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 动态路由分配</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  roles: [],</span><br><span class="line">  allRouters: defaultRouterMap, <span class="comment">//默认路由</span></span><br><span class="line">  addRouters: [] <span class="comment">//实际显示路由</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  roles: <span class="function"><span class="params">state</span> =&gt;</span> state.roles,</span><br><span class="line">  allRouters: <span class="function"><span class="params">state</span> =&gt;</span> state.allRouters,</span><br><span class="line">  addRouters: <span class="function"><span class="params">state</span> =&gt;</span> state.addRouters,<span class="comment">//匹配到的路由</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">setRoles</span>(<span class="params">state,val</span>)</span>&#123;</span><br><span class="line">    state.roles = val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setRouter</span>(<span class="params">state,router</span>)</span> &#123;</span><br><span class="line">    state.addRouters = router;</span><br><span class="line">    state.allRouters = defaultRouterMap.concat(router)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;<span class="comment">//异步</span></span><br><span class="line">  <span class="function"><span class="title">getRoles</span>(<span class="params">&#123; commit &#125;, data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      getUserRole()</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          commit(<span class="string">&#x27;setRoles&#x27;</span>, res.data.data.role)<span class="comment">//调接口获取roles，存储state</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 匹配角色权限，动态创建路由</span></span><br><span class="line">  <span class="function"><span class="title">createRouter</span>(<span class="params">&#123; commit &#125;,val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> role = val</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">let</span> filterRouter = []</span><br><span class="line">      <span class="keyword">if</span>(role.includes(<span class="string">&#x27;admin&#x27;</span>)) &#123;<span class="comment">//超级管理员</span></span><br><span class="line">        filterRouter = asyncRouterMap</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">//普通管理员  考虑404页面，asyncRouterMap最后一个</span></span><br><span class="line">        filterRouter = asyncRouterMap.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(hasPermission(role,item))&#123;</span><br><span class="line">            <span class="comment">// 子路由</span></span><br><span class="line">            <span class="keyword">if</span>(item.children &amp;&amp; item.children.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">              item.children = item.children.filter(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(hasPermission(role,child)) <span class="keyword">return</span> child;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 增加404</span></span><br><span class="line">      filterRouter.push(asyncRouterMap[asyncRouterMap.length - <span class="number">1</span>])</span><br><span class="line">      commit(<span class="string">&#x27;setRouter&#x27;</span>,filterRouter)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">//命名空间</span></span><br><span class="line">  state ,</span><br><span class="line">  getters ,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.利用路由拦截，根据取到的用户角色,跟本地的路由表进行对比，过滤出用户对应的路由，并利用路由进行左侧菜单渲染<br>在router.beforeEach中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/permit.js中写入</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeToken, removeUsername &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/cookie&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span><br><span class="line"><span class="comment">// 路由守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 校验非登录页面的状态</span></span><br><span class="line">  <span class="keyword">if</span> (to.path !== <span class="string">&quot;/login&quot;</span> ) &#123; <span class="comment">//如果不是去往登录页面</span></span><br><span class="line">    <span class="keyword">if</span>(getToken()) &#123; <span class="comment">//cookie中有token值存储</span></span><br><span class="line">      <span class="comment">// 获取用户角色，动态分配路由权限</span></span><br><span class="line">      <span class="keyword">if</span> ( store.getters[<span class="string">&#x27;permission/roles&#x27;</span>].length === <span class="number">0</span> ) &#123; <span class="comment">//用户没有角色权限在store</span></span><br><span class="line">        store.dispatch(<span class="string">&#x27;permission/getRoles&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">//获取角色权限信息-后台接口</span></span><br><span class="line">          <span class="comment">// 根据权限创建动态路由</span></span><br><span class="line">          store.dispatch(<span class="string">&#x27;permission/createRouter&#x27;</span>, res).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 路由更新---循环遍历路由没更新layoutNav 重新生成左侧菜单栏</span></span><br><span class="line">            router.options.routes = store.getters[<span class="string">&#x27;permission/allRouters&#x27;</span>]</span><br><span class="line">            <span class="comment">//获取匹配，动态路由添加，将生成好的路由</span></span><br><span class="line">            router.addRoutes(store.getters[<span class="string">&#x27;permission/addRouters&#x27;</span>])</span><br><span class="line">            <span class="comment">// console.log(router)</span></span><br><span class="line">            next(&#123;...to, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)<span class="comment">//不被记录历史记录</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 非登录页面无token则跳转至登录页面</span></span><br><span class="line">    next(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">      removeToken();</span><br><span class="line">      removeUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>├── src<br>—-├── icons<br>——–├── svg<br>————├── add.svg<br>————├── info.svg<br>————├── user.svg<br>            ……<br>——–├── index.js<br>——–├── SvgIcon.vue</p><h3 id="后端动态返回路由数据"><a href="#后端动态返回路由数据" class="headerlink" title="后端动态返回路由数据"></a>后端动态返回路由数据</h3><blockquote><p>通常需要后端返回路由列表，前端渲染使用</p></blockquote><ul><li>配置项目路由文件，该文件中没有路由，或者存在一部分公共路由，即没有权限的路由<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span>;</span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">// 配置项目中没有涉及权限的公共路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login&#x27;</span>),</span><br><span class="line">        hidden: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">        component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">        hidden: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createRouter = <span class="function">() =&gt;</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    scrollBehavior: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">    routes: constantRoutes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> router = createRouter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newRouter = createRouter()</span><br><span class="line">    router.matcher = newRouter.matcher</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li>新建一个公共的asyncRouter.js文件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入路由文件这种的公共路由</span></span><br><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span>;</span><br><span class="line"><span class="comment">// Layout 组件是项目中的主页面，切换路由时，仅切换Layout中的组件</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getAsyncRoutes</span>(<span class="params">routes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line">    <span class="comment">// 定义路由中需要的自定名</span></span><br><span class="line">    <span class="keyword">const</span> keys = [<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;children&#x27;</span>, <span class="string">&#x27;redirect&#x27;</span>, <span class="string">&#x27;meta&#x27;</span>, <span class="string">&#x27;hidden&#x27;</span>]</span><br><span class="line">    <span class="comment">// 遍历路由数组去重组可用的路由</span></span><br><span class="line">    routes.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newItem = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (item.component) &#123;</span><br><span class="line">            <span class="comment">// 判断 item.component 是否等于 &#x27;Layout&#x27;,若是则直接替换成引入的 Layout 组件</span></span><br><span class="line">            <span class="keyword">if</span> (item.component === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">                newItem.component = Layout</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//  item.component 不等于 &#x27;Layout&#x27;,则说明它是组件路径地址，因此直接替换成路由引入的方法</span></span><br><span class="line">                newItem.component = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;item.component&#125;</span>`</span>],resolve)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 此处用reqiure比较好，import引入变量会有各种莫名的错误</span></span><br><span class="line">                <span class="comment">// newItem.component = (() =&gt; import(`@/views/$&#123;item.component&#125;`));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keys.includes(key)) &#123;</span><br><span class="line">                newItem[key] = item[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若遍历的当前路由存在子路由，需要对子路由进行递归遍历</span></span><br><span class="line">        <span class="keyword">if</span> (newItem.children &amp;&amp; newItem.children.length) &#123;</span><br><span class="line">            newItem.children = getAsyncRoutes(item.children)</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(newItem)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 返回处理好且可用的路由数组</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>创建路由守卫：创建公共的permission.js文件，设置路由守卫<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  进度条引入设置如上面第一种描述一样</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span> <span class="comment">// progress bar</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="comment">// progress bar style</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span> <span class="comment">// get token from cookie</span></span><br><span class="line"><span class="keyword">import</span> &#123; getAsyncRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/asyncRouter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>];</span><br><span class="line">router.beforeEach( <span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">    NProgress.start()</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title;</span><br><span class="line">    <span class="comment">// 获取用户token，用来判断当前用户是否登录</span></span><br><span class="line">    <span class="keyword">const</span> hasToken = getToken()</span><br><span class="line">    <span class="keyword">if</span> (hasToken) &#123;</span><br><span class="line">        <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">            next(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">            NProgress.done()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//异步获取store中的路由</span></span><br><span class="line">            <span class="keyword">let</span> route = <span class="keyword">await</span> store.state.addRoutes;</span><br><span class="line">            <span class="keyword">const</span> hasRouters = route &amp;&amp; route.length&gt;<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//判断store中是否有路由，若有，进行下一步</span></span><br><span class="line">            <span class="keyword">if</span> ( hasRouters ) &#123;</span><br><span class="line">                next()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//store中没有路由，则需要获取获取异步路由，并进行格式化处理</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> accessRoutes = getAsyncRoutes(<span class="keyword">await</span> store.state.addRoutes );</span><br><span class="line">                    <span class="comment">// 动态添加格式化过的路由</span></span><br><span class="line">                    router.addRoutes(accessRoutes);</span><br><span class="line">                    next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="comment">// Message.error(&#x27;出错了&#x27;)</span></span><br><span class="line">                    next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">                    NProgress.done()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            next()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">            NProgress.done()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    NProgress.done()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在main.js中引入permission.js文件</li><li>在login登录的时候将路由信息存储到store中<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  登录接口调用后，调用路由接口，后端返回相应用户的路由res.router，我们需要存储到store中，方便其他地方拿取</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&quot;addRoutes&quot;</span>, res.router);</span><br></pre></td></tr></table></figure>到这里，整个动态路由就可以走通了，但是页面跳转、路由守卫处理是异步的，会存在动态路由添加后跳转的是空白页面，这是因为路由在执行next()时，router里面的数据还不存在，此时，你可以通过window.location.reload()来刷新路由</li></ul><p>作者：苦咖啡Li<br>链接：<a href="https://www.jianshu.com/p/4f2566b67989">https://www.jianshu.com/p/4f2566b67989</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">routerList = [</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/other&quot;</span>,</span><br><span class="line">        <span class="string">&quot;component&quot;</span>: <span class="string">&quot;Layout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;noRedirect&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;otherPage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;component&quot;</span>: <span class="string">&quot;file/a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;meta&quot;</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;a页面&quot;</span>, <span class="string">&quot;noCache&quot;</span>: <span class="string">&quot;true&quot;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">                <span class="string">&quot;component&quot;</span>: <span class="string">&quot;file/b&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">                <span class="string">&quot;meta&quot;</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;b页面&quot;</span>, <span class="string">&quot;noCache&quot;</span>: <span class="string">&quot;true&quot;</span> &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 路由权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>line-height的继承</title>
      <link href="2021/03/20/line-height%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>2021/03/20/line-height%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> line-height </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中配置svg图标</title>
      <link href="2021/03/20/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AEsvg%E5%9B%BE%E6%A0%87/"/>
      <url>2021/03/20/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%85%8D%E7%BD%AEsvg%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：安装支持svg的依赖"><a href="#第一步：安装支持svg的依赖" class="headerlink" title="第一步：安装支持svg的依赖"></a>第一步：安装支持svg的依赖</h3><blockquote><p>npm install svg-sprite-loader -D</p></blockquote><p>如果这部不安装，后续操作完成可能成功，也可能不成功，就是很神奇<br>在vue中配置处理svg文件，结果图标显示不出来也不报错，正常的应该shadow-root下面还有dom节点，就是因为没有安装这个svg-sprite-loader</p><span id="more"></span><h3 id="vue-config-js配置文件中"><a href="#vue-config-js配置文件中" class="headerlink" title="vue.config.js配置文件中"></a>vue.config.js配置文件中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// svg图标配置</span></span><br><span class="line">  <span class="keyword">const</span> svgRule = config.module.rule(<span class="string">&quot;svg&quot;</span>);</span><br><span class="line">  svgRule.uses.clear();</span><br><span class="line">  svgRule</span><br><span class="line">    .use(<span class="string">&quot;svg-sprite-loader&quot;</span>)</span><br><span class="line">    .loader(<span class="string">&quot;svg-sprite-loader&quot;</span>)</span><br><span class="line">    .options(&#123;</span><br><span class="line">      symbolId: <span class="string">&quot;icon-[name]&quot;</span>,</span><br><span class="line">      include: [<span class="string">&quot;./src/icons&quot;</span>]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>另外一种写法，我没实验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">//有些编辑器(比如webstorm)中下段代码可能会报错，为保险起见需要加入 /* eslint-disable */通知编辑器不需要检查该配置</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  lintOnSave: <span class="literal">false</span>,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dir = path.resolve(__dirname, <span class="string">&#x27;src/assets/icons&#x27;</span>)</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">&#x27;svg-sprite&#x27;</span>)  <span class="comment">//添加规则</span></span><br><span class="line">      .test(<span class="regexp">/\.svg$/</span>)      <span class="comment">//以.svg结尾的</span></span><br><span class="line">      .include.add(dir).end()</span><br><span class="line">      .use(<span class="string">&#x27;svg-sprite-loader&#x27;</span>).loader(<span class="string">&#x27;svg-sprite-loader&#x27;</span>).options(&#123;<span class="attr">extract</span>: <span class="literal">false</span>&#125;).end()</span><br><span class="line">       </span><br><span class="line">      .use(<span class="string">&#x27;svgo-loader&#x27;</span>).loader(<span class="string">&#x27;svgo-loader&#x27;</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> (&#123;...options,<span class="attr">plugins</span>:[&#123;<span class="attr">removeAttrs</span>:&#123;<span class="attr">attrs</span>:<span class="string">&#x27;fill&#x27;</span>&#125;&#125;]&#125;)).end();</span><br><span class="line">      <span class="comment">//为了防止出现svg图标出现有色的状态加入此配置不影响后期开发者用css对图标进行颜色上的控制</span></span><br><span class="line"></span><br><span class="line">    config.plugin(<span class="string">&#x27;svg-sprite&#x27;</span>).use(<span class="built_in">require</span>(<span class="string">&#x27;svg-sprite-loader/plugin&#x27;</span>), [&#123;<span class="attr">plainSprite</span>: <span class="literal">true</span>&#125;]);</span><br><span class="line">    config.module.rule(<span class="string">&#x27;svg&#x27;</span>).exclude.add(dir);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在src-icons下新建文件夹svg及文件SvgIcon-vue，SvgIcon-vue代码如下"><a href="#在src-icons下新建文件夹svg及文件SvgIcon-vue，SvgIcon-vue代码如下" class="headerlink" title="在src/icons下新建文件夹svg及文件SvgIcon.vue，SvgIcon.vue代码如下"></a>在src/icons下新建文件夹svg及文件SvgIcon.vue，SvgIcon.vue代码如下</h3><p>├── src<br>—-├── icons<br>——–├── svg<br>————├── add.svg<br>————├── info.svg<br>————├── user.svg<br>            ……<br>——–├── index.js<br>——–├── SvgIcon.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg :class&#x3D;&quot;svgClass&quot; aria-hidden&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href&#x3D;&quot;iconName&quot;&gt;&lt;&#x2F;use&gt;</span><br><span class="line">  &lt;&#x2F;svg&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, ref, computed &#125; from &quot;@vue&#x2F;composition-api&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;SvgIcon&quot;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props, &#123; root &#125;) &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">     **data数据</span><br><span class="line">     *&#x2F;</span><br><span class="line">    const msg &#x3D; ref(&quot;Hello world!&quot;);</span><br><span class="line">    &#x2F;*</span><br><span class="line">     *计算属性 vue2.0不能使用箭头函数     *&#x2F;</span><br><span class="line">    const iconName &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      return &#96;#icon-$&#123;props.iconClass&#125;&#96;;</span><br><span class="line">    &#125;);</span><br><span class="line">    const svgClass &#x3D; computed(() &#x3D;&gt; &#123;</span><br><span class="line">      if (props.className) &#123;</span><br><span class="line">        return &#96;svg-icon $&#123;props.className&#125;&#96;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &#96;svg-icon&#96;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return &#123;</span><br><span class="line">      msg,</span><br><span class="line">      iconName,</span><br><span class="line">      svgClass</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  color: #fff;</span><br><span class="line">  &amp;.font12 &#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index.js中代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">&quot;./SvgIcon&quot;</span>;</span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&quot;svg-icon&quot;</span>, SvgIcon);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">*require.context读取指定目录的所有文件</span></span><br><span class="line"><span class="comment">*参数：</span></span><br><span class="line"><span class="comment">*    目录</span></span><br><span class="line"><span class="comment">*    是否遍历所有子级目录</span></span><br><span class="line"><span class="comment">*    定义遍历文件规则</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">&quot;./svg&quot;</span>, <span class="literal">false</span>, <span class="regexp">/\.svg$/</span>);</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> requireContext.keys().map(requireContext);</span><br><span class="line">&#125;;</span><br><span class="line">requireAll(req);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="而后在main-js中引入全局组件svg"><a href="#而后在main-js中引入全局组件svg" class="headerlink" title="而后在main.js中引入全局组件svg"></a>而后在main.js中引入全局组件svg</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义引入全局组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/icons/index&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="最后使用"><a href="#最后使用" class="headerlink" title="最后使用"></a>最后使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg-icon iconClass&#x3D;&quot;add&quot; className&#x3D;&quot;add&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>更改svg图标颜色，如果改不了，下载svg时去色处理</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show</title>
      <link href="2021/03/10/show/"/>
      <url>2021/03/10/show/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 初级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中路由参数传递的几种方式</title>
      <link href="2021/03/06/router/"/>
      <url>2021/03/06/router/</url>
      
        <content type="html"><![CDATA[<blockquote><p>路由传参，一般情况下为详情页的跳转，需要对应的id获取接口查询到的相应的信息，例如编辑某个商品的详情页，编辑某个文章的详情页等等都会用到，vue中有几种方式实现</p></blockquote> <span id="more"></span><h3 id="第一种-明文传参-query属性传参"><a href="#第一种-明文传参-query属性传参" class="headerlink" title="第一种 明文传参 query属性传参"></a>第一种 明文传参 query属性传参</h3><blockquote><p>这种方式会在URL路径中显示传递的参数，以❓拼接键值对(key=val&amp;key=val)的形式传参<br>这种方式传参，<strong>页面刷新参数不会消失</strong>，但是参数是公开的,<strong>路径为/film?filmId=3355</strong></p></blockquote><p><strong>做法</strong></p><ul><li><p>首先需要在router/index.js路由中设置路由信息,以电影详情页为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/film&quot;</span>,</span><br><span class="line">    name: <span class="string">&quot;film&quot;</span>, <span class="comment">// 路由跳转用到  query</span></span><br><span class="line">    <span class="comment">// hidden: true,</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      <span class="comment">//自定义属性</span></span><br><span class="line">      title: <span class="string">&quot;详情页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/films/detail&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>传参数时，两种方式，一是在html页面中通过router-link携带参数<strong>query</strong>跳转<br>{<br> name:路由名称film,<br> query:{filmId: 3355}<br>}</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:xxx,query:&#123;filmId: 3355&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>另一种通过js中通过this.$router.push进行携带<strong>query</strong>参数跳转</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">   name: <span class="string">`film`</span>,</span><br><span class="line">   query: &#123;</span><br><span class="line">     filmId: <span class="number">3355</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>获取参数</strong>，这种方式的参数储存在this.$route.query属性中，打点获取即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.query.filmId</span><br></pre></td></tr></table></figure><h3 id="第二种-密文传参-params属性传参"><a href="#第二种-密文传参-params属性传参" class="headerlink" title="第二种 密文传参 params属性传参"></a>第二种 密文传参 params属性传参</h3><blockquote><p>这种方式URL不会显示传递的参数，<strong>页面刷新参数就会消失</strong>，可以结合本地存储技术保存参数，参考第四种方式，但大材小用,<strong>路径为/film</strong></p></blockquote></li></ul><p> <strong>做法</strong></p><ul><li>同样需要在router/index.js路由中设置路由信息,与query传参路由设置相同，不再赘述</li></ul><blockquote><p>传参时，同样两种方式，一是在html页面中通过router-link携带参数<strong>params</strong>跳转，二是js中通过this.$router.push进行携带<strong>params</strong>参数跳转</p></blockquote> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;film&#x27;,params:&#123;filmId: 3355&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">   name: <span class="string">`film`</span>, <span class="comment">// params 传参 只能使用name</span></span><br><span class="line">   params: &#123;</span><br><span class="line">    filmId: <span class="number">3355</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><strong>获取参数</strong>，这种方式的参数储存在<strong>this.$route.params</strong>属性中，打点获取即可<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.params.filmId</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="第三种-路由-冒号形式传递参数"><a href="#第三种-路由-冒号形式传递参数" class="headerlink" title="第三种 路由:冒号形式传递参数"></a>第三种 路由:冒号形式传递参数</h3><blockquote><p>在路由中路径path配置:id,这种传递方式<strong>页面刷新参数不会消失</strong>，<strong>url路径为/film/3355</strong></p></blockquote><p> <strong>做法</strong></p><ul><li><p>首先需要在router/index.js路由中设置路由信息,以电影详情页为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&quot;/film/:filmId&quot;</span>, <span class="comment">//配置路径参数 如果多个参数则&quot;/film/:filmId/:data&quot;</span></span><br><span class="line">    name: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    <span class="comment">// hidden: true,</span></span><br><span class="line">    meta: &#123;</span><br><span class="line">      <span class="comment">//自定义属性</span></span><br><span class="line">      title: <span class="string">&quot;详情页&quot;</span>,</span><br><span class="line">      icon: <span class="string">&quot;film&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/films/detail&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>js中通过this.$router.push由path拼接路径参数进行跳转跳转</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123; <span class="attr">path</span>: <span class="string">`/film/<span class="subst">$&#123;data.id&#125;</span>`</span>&#125;) <span class="comment">//  &quot;/film/335&quot;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>获取参数</strong>，这种方式的参数同样储存在<strong>this.$route.params</strong>属性中，打点获取即可</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$route.params.filmId</span><br></pre></td></tr></table></figure><h3 id="第四种-vuex结合HTML5本地存储解决params刷新参数消失问题（第二种-）"><a href="#第四种-vuex结合HTML5本地存储解决params刷新参数消失问题（第二种-）" class="headerlink" title="第四种 vuex结合HTML5本地存储解决params刷新参数消失问题（第二种[]）"></a>第四种 vuex结合HTML5本地存储解决params刷新参数消失问题（第二种[]）</h3><blockquote><p>在store中定义 state commit dispatch</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comment</title>
      <link href="2021/03/03/comment/"/>
      <url>2021/03/03/comment/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a10128fcd85c2d2e4728b2fbfde0fcdc2d53f3dcdb0cc797a50e6fd801589b90">4630436162ade97ba2718b7d0c4b3b637b85116c2dd9ac805548a43005ef47c119319d3dcfb96594801ab471f6cfe41a4ffc22db95a4bc4ee7cee3d5d7225fc583065d6c9654dfcb050d79cbef5288f13e0d503ab0ac72d9340fc4ad4b7cd936dc0e1a50375c6c0df5ad34df9ab3b13b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
          <category> 评论功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 评论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue移动端项目中两种方式实现页面自适应布局</title>
      <link href="2021/02/27/media-rem/"/>
      <url>2021/02/27/media-rem/</url>
      
        <content type="html"><![CDATA[<p>方案一：手机淘宝移动端适配方案，引入flexible.js文件<br>src =&gt; assets =&gt; flexible.js<br>css样式时应计算为相应rem 利用vsCode插件</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">flexible</span>(<span class="params"><span class="built_in">window</span>, <span class="built_in">document</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement <span class="comment">//获取html标签</span></span><br><span class="line">  <span class="comment">// 获取当前设备的物理像素比</span></span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(dpr)</span><br><span class="line">  <span class="comment">// adjust body font size</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setBodyFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.fontSize = (<span class="number">12</span> * dpr) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, setBodyFontSize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  setBodyFontSize();</span><br><span class="line">  <span class="comment">// console.log(document.body.style.fontSize)</span></span><br><span class="line">  <span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">20</span></span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(docEl.clientWidth)</span><br><span class="line">  setRemUnit()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset rem unit on page resize</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, setRemUnit)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">      setRemUnit()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// detect 0.5px supports</span></span><br><span class="line">  <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeBody = <span class="built_in">document</span>.createElement(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    testElement.style.border = <span class="string">&#x27;.5px solid transparent&#x27;</span></span><br><span class="line">    fakeBody.appendChild(testElement)</span><br><span class="line">    docEl.appendChild(fakeBody)</span><br><span class="line">    <span class="keyword">if</span> (testElement.offsetHeight === <span class="number">1</span>) &#123;</span><br><span class="line">      docEl.classList.add(<span class="string">&#x27;hairlines&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.removeChild(fakeBody)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>))</span><br></pre></td></tr></table></figure><p>方案二：自定义媒体查询,根据常见屏幕尺寸设置<br>src =&gt; styles =&gt; flexible.scss<br>在main.scss中引入,这种方案因为有同时引入初始化样式normalize.scss所有会不生效</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./flexible.scss&quot;</span>;</span><br><span class="line">// <span class="keyword">@import</span> <span class="string">&quot;./normalize.scss&quot;</span>;  //页面初始化样式</span><br></pre></td></tr></table></figure><p>flexible.scss文件内容</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义的份数为15等份，每一份为html字体的大小，为1rem</span></span><br><span class="line"><span class="comment">//  屏幕尺寸不同定义不同的1rem就是不同的html字体大小</span></span><br><span class="line"><span class="comment">/* 这里面设置常见的屏幕尺寸，修改里面html文字大小 */</span></span><br><span class="line"><span class="comment">/* 不能无限制的大，所以设置一个固定的html字体50 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="comment">/* 写在最上面，因为样式有层叠性 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 15等分不变，所以定义一个变量</span></span><br><span class="line"><span class="variable">$no</span>: <span class="number">15</span>;</span><br><span class="line"><span class="comment">//  屏幕为320px时 定义html字体大小为320/15</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">320px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 360</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">360px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">360px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  375 iphone678</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">370px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">375px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 384</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">384px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">384px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  400</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">400px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  414</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">414px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  424</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">424px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">424px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  480</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">480px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  540</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">540px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  720</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">720px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">720px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  750</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">750px</span> / <span class="variable">$no</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> CSS </category>
          
          <category> 移动端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> vue </tag>
            
            <tag> rem </tag>
            
            <tag> flexible </tag>
            
            <tag> CSS </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端布局及页面自适应布局（rem布局）</title>
      <link href="2021/02/27/flexible/"/>
      <url>2021/02/27/flexible/</url>
      
        <content type="html"><![CDATA[<p>常见的页面布局方式有</p><ul><li>静态布局  px布局 即传统web布局，网页上所有元素尺寸一律用px作为单位</li><li>流式布局（Liquid Layout） 主要的划分区域的尺寸使用百分数（搭配min-*、max-*属性使用）以京东移动端为代表</li><li>自适应布局（Adaptive Layout） 即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围</li><li>响应式布局（Responsive Layout） 检测窗口大小利用bootstrap布局</li><li>弹性布局（rem/em布局） css3 rem<span id="more"></span></li></ul><p>1.如果只做pc端，那么静态布局（定宽度）是最好的选择；</p><p>2.如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份css+一份js调节font-size搞定；</p><p>3.如果pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局。</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p>rem (root em)是一个相对单位，是相对于html元素的字体大小（em是父元素字体大小）。比如，根元素（html）font-size=12px; 则1rem就是12px。</p><h4 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h4><h4 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h4><h4 id="vh"><a href="#vh" class="headerlink" title="vh"></a>vh</h4><h4 id="dpr"><a href="#dpr" class="headerlink" title="dpr"></a>dpr</h4><h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><h4 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h4><h5 id="手机淘宝适配方案"><a href="#手机淘宝适配方案" class="headerlink" title="手机淘宝适配方案"></a>手机淘宝适配方案</h5>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 移动端 </tag>
            
            <tag> rem </tag>
            
            <tag> flexible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写点什么</title>
      <link href="2021/02/26/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/"/>
      <url>2021/02/26/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>还差评论功能</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目过程中遇到的报错问题解决</title>
      <link href="2021/01/06/%E7%A7%9F%E8%BD%A6%E9%A1%B9%E7%9B%AE-bug/"/>
      <url>2021/01/06/%E7%A7%9F%E8%BD%A6%E9%A1%B9%E7%9B%AE-bug/</url>
      
        <content type="html"><![CDATA[<p>租车项目，遇到的bug，以及解决办法，记录一下</p><span id="more"></span><h2 id="租车项目"><a href="#租车项目" class="headerlink" title="租车项目"></a>租车项目</h2><h3 id="bug1-watch监听路由跳转"><a href="#bug1-watch监听路由跳转" class="headerlink" title="bug1:watch监听路由跳转"></a>bug1:watch监听路由跳转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 地图 --&gt;</span><br><span class="line">       &lt;aMap /&gt;</span><br><span class="line">       &lt;!-- 汽车数据dom渲染区域 --&gt;</span><br><span class="line">        &lt;Cars /&gt;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;user-view&quot;</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;isShow? &#x27;open&#x27;:&#x27;&#x27;&quot;</span> &gt;</span><br><span class="line">           &lt;router-view/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> aMap <span class="keyword">from</span> <span class="string">&#x27;../amap/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cars <span class="keyword">from</span> <span class="string">&#x27;../cars/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    aMap,</span><br><span class="line">    Cars</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        isShow: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//   watch监听路由变化,有bug，一刷新用户页面就不见了</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">      <span class="string">&#x27;$route&#x27;</span> : &#123;</span><br><span class="line">        <span class="comment">//   默认就是handler函数？</span></span><br><span class="line">          handler (newValue)&#123;</span><br><span class="line">              <span class="keyword">const</span> routerName = newValue.name</span><br><span class="line">              <span class="built_in">this</span>.isShow = routerName === <span class="string">&#x27;User&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">              <span class="built_in">console</span>.log(routerName)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//   改为计算属性监听路由</span></span><br><span class="line"><span class="comment">//   computed: &#123;</span></span><br><span class="line"><span class="comment">//       isShow () &#123;</span></span><br><span class="line"><span class="comment">//           console.log(this.$route)</span></span><br><span class="line"><span class="comment">//           return this.$route.name === &#x27;User&#x27;</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=<span class="string">&quot;scss&quot;</span> scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  .user-view &#123;</span><br><span class="line">      position: fixed;</span><br><span class="line">      top: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//   right: 0;</span></span><br><span class="line">      right: -600px;</span><br><span class="line">      bottom: <span class="number">0</span>;</span><br><span class="line">      width: 410px;</span><br><span class="line">      background-color: #34393f;</span><br><span class="line">      z-index: <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">//   </span></span><br><span class="line">    -webkit-transition: all .3s ease 0s;</span><br><span class="line">    -moz-transition: all .3s ease 0s;</span><br><span class="line">    -webkit-transition: all .3s ease 0s;</span><br><span class="line">    -ms-transition: all .3s ease 0s;</span><br><span class="line">    -o-transition: all .3s ease 0s;</span><br><span class="line">    transition: all .3s ease 0s;</span><br><span class="line">      &amp;.open &#123;</span><br><span class="line">          right: <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需求：当路由跳转到/user页面时，右侧显示用户信息界面，通过watch监听路由变化判断是否当前路由是否是/user来决定是否显示用户页面，这样操作点击按钮跳转路由没有问题，页面刷新却无法显示用户页面，存在这一bug</p></blockquote><blockquote><p>原因是：什么呢？深度监听的问题，vue为了性能考虑会限制监听深度，需要deep解除限制</p></blockquote><blockquote><ul><li>解决方法1：解除deep限制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="string">&#x27;$route&#x27;</span> : &#123;</span><br><span class="line">      <span class="comment">//   默认就是handler函数？</span></span><br><span class="line">        handler (newValue)&#123;</span><br><span class="line">            <span class="keyword">const</span> routerName = newValue.name</span><br><span class="line">            <span class="built_in">this</span>.isShow = routerName === <span class="string">&#x27;User&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">            <span class="built_in">console</span>.log(routerName)</span><br><span class="line">        &#125;,</span><br><span class="line">            <span class="comment">//解除deep限制</span></span><br><span class="line">        deep:<span class="literal">true</span>,</span><br><span class="line">        immediate: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解决方法2：改为由计算属性监听路由变化，因为计算属性的缓存机制？刷新不会导致路由发生变化，不发生变化就用之前缓存的？我是这样理解，后续确定一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改为计算属性监听路由</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    isShow () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$route)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$route.name === <span class="string">&#x27;User&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="bug2-swiper插件使用"><a href="#bug2-swiper插件使用" class="headerlink" title="bug2:swiper插件使用"></a>bug2:swiper插件使用</h3><p>swiper 右侧箭头出不来，2个slide会叠加在一起，很多个slide ，每个silde的宽度会很宽，800多px基本占满一个屏幕，导致滑块之间相隔很远,最后会有一大片空白</p><p>解决办法</p><blockquote><p>1.我把每个滑块的宽强制改成跟内容物一样的宽度了，解决掉了每个silde的宽度会很宽问题导致空袭很大</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.swiper-slide &#123;</span><br><span class="line">  width: 505px !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.右侧箭头怎么出现？原来是我包住轮播图的外层元素盒子没有给宽度，所以右侧箭头跑出了屏幕外面。。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.index_wrap &#123;</span><br><span class="line">   width: <span class="number">100</span>%;<span class="comment">// 给一个宽度，因为是fixed定位，所以右侧箭头想让其在屏幕右侧显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="bug3：用户信息弹窗"><a href="#bug3：用户信息弹窗" class="headerlink" title="bug3：用户信息弹窗"></a>bug3：用户信息弹窗</h3><blockquote><p>需求：点击除用户页面之外的地方是返回首页，用户页面隐藏回去</p><p><strong>弹窗</strong></p><p>bug:触发事件时会报错vue-router.esm.js?8c4f:2065 Uncaught (in promise) NavigationDuplicated: Avoided redundant navigation to current location: “/“.</p></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> UserTar = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.user-view&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (UserTar &amp;&amp; e.target != UserTar) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法：<strong>在使用 replace、push等方法时捕获异常</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/&#x27;</span>).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br></pre></td></tr></table></figure></blockquote><p>字体图标icon怎么跟右侧文字对齐，中线对齐？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: super;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法：用vertical-align super属性值，因为字体图标也是文字，所以middle没有用</p><h3 id="bug4-用户页面消失"><a href="#bug4-用户页面消失" class="headerlink" title="bug4 用户页面消失"></a>bug4 用户页面消失</h3><p>点击用户页面 里面的安全设置内容，用户界面会消失，并没有不消失，导致无法继续后续安全设置等路由内容</p><p>原因：因为当时判断用户界面显示隐藏的条件有问题，没有考虑到后续safe等路径值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  $route: &#123;</span><br><span class="line">    <span class="comment">//   默认就是handler函数？</span></span><br><span class="line">    handler (newValue) &#123;</span><br><span class="line">      <span class="keyword">const</span> routerName = newValue.name</span><br><span class="line">      <span class="comment">// 这里要考虑到后续用户界面里内容链接跳转的问题，路径会变化，不是user了</span></span><br><span class="line">      <span class="built_in">this</span>.isShow = routerName === <span class="string">&#x27;User&#x27;</span></span><br><span class="line">      <span class="comment">// console.log(routerName)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.isShow = routerName === <span class="string">&#x27;Index&#x27;</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="bug5-git版本管理"><a href="#bug5-git版本管理" class="headerlink" title="bug5 git版本管理"></a>bug5 git版本管理</h3><p><strong>原因是没有提交一个对象，要先commit之后才会真正建立master分支，此时才可以建立其它分支。</strong></p><p>git branch -a查看远程分支</p><h3 id="bug6-v-show隐藏重复密码验证"><a href="#bug6-v-show隐藏重复密码验证" class="headerlink" title="bug6 v-show隐藏重复密码验证"></a>bug6 v-show隐藏重复密码验证</h3><p>表单验证v-show显示隐藏重复密码框，区别注册和登录页面，会有bug，因为show只是隐藏了重复密码，但验证仍然在，没有通过去，所以会登录不上去</p><p>解决办法: 验证的时候判断一下是不是登录界面，是登陆界面就直接通过，不再进行验证即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证重复密码</span></span><br><span class="line">    <span class="keyword">var</span> checkRepassword = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是登录，则直接通过即可</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.menuData[<span class="number">0</span>].current) &#123;</span><br><span class="line">        callback();</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.ruleForm.password = stripScript(value)</span><br><span class="line">      value = <span class="built_in">this</span>.ruleForm.password</span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;请再次输入密码&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(value !== <span class="built_in">this</span>.ruleForm.password) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;两次输入密码不一致&quot;</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="bug7"><a href="#bug7" class="headerlink" title="bug7"></a>bug7</h3><blockquote><p>使用了elementui，由于代码中涉及到，根据登录/注册决定相应的表单的某几项出现的项是什么，需要用到v-if/v-show来切换，但是切换后，切换前的验证错误信息并没有清除，出现在切换后的el-form-item上。</p></blockquote><ul><li><p>解决办法1：针对使用了v-if v-else需要切换的项，加上:key唯一区分就好了，告诉vue，切换后的表单项不是切换前的，所以你把错误验证也清空了</p></li><li><p>key的值是什么不重要，只需要这两个不一样就好了</p></li><li><p>:key=”menuData[0].current ? ‘1’:’2’”</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;menuData[0].current ? &#x27;1&#x27;:&#x27;2&#x27;&quot;</span>&gt;</span></span><br><span class="line">       &lt;el-input</span><br><span class="line">         type=&quot;text&quot;</span><br><span class="line">         v-model=&quot;ruleForm.email&quot;</span><br><span class="line">         autocomplete=&quot;off&quot;</span><br><span class="line">       &gt;<span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;menuData[0].current ? &#x27;3&#x27;:&#x27;4&#x27;&quot;</span>&gt;</span></span><br><span class="line">       &lt;el-input</span><br><span class="line">         type=&quot;password&quot;</span><br><span class="line">         v-model=&quot;ruleForm.password&quot;</span><br><span class="line">         autocomplete=&quot;off&quot;</span><br><span class="line">         minlength=&quot;6&quot;</span><br><span class="line">         maxlength=&quot;20&quot;</span><br><span class="line">       &gt;<span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>方法2 element-ui有重置表单的方法啦，用这个就好了</strong></p></blockquote><h3 id="bug8-验证码输入框无法输入"><a href="#bug8-验证码输入框无法输入" class="headerlink" title="bug8 验证码输入框无法输入"></a>bug8 验证码输入框无法输入</h3><p>我勒个去，复制的element-ui age那个表单v-model后面.number了所以没办法输入字母，只能数字</p><h3 id="bug9-关于字体图标与文字对齐"><a href="#bug9-关于字体图标与文字对齐" class="headerlink" title="bug9 关于字体图标与文字对齐"></a>bug9 关于字体图标与文字对齐</h3><p>super</p><h3 id="bug10"><a href="#bug10" class="headerlink" title="bug10"></a>bug10</h3><p>v-for循环遍历路由导航栏，出不来，因为我的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为这里我只写到了.options！！！害我找半天，循环遍历不出来，菜</span></span><br><span class="line"><span class="keyword">const</span> routers = reactive(root.$router.options.routes)</span><br></pre></td></tr></table></figure><h3 id="bug11-数据类型"><a href="#bug11-数据类型" class="headerlink" title="bug11 数据类型"></a>bug11 数据类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-submenu :index=<span class="string">&quot;index+&#x27;&#x27;&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(item,index) in routers&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;</span><br><span class="line">        &lt;template slot=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-icon-location&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span v-<span class="keyword">if</span>=<span class="string">&quot;item.meta&quot;</span>&gt;&#123;&#123;item.meta.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;el-menu-item-group&gt;</span><br><span class="line">          &lt;template slot=<span class="string">&quot;title&quot;</span>&gt;分组一&lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item index=<span class="string">&quot;1-1&quot;</span>&gt;选项<span class="number">1</span>&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-menu-item-group&gt;</span><br><span class="line">      &lt;/el-submenu&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue.runtime.esm.js?2b0e:<span class="number">619</span> [Vue warn]: Invalid prop: type check failed <span class="keyword">for</span> prop <span class="string">&quot;index&quot;</span>. Expected <span class="built_in">String</span> <span class="keyword">with</span> value <span class="string">&quot;0&quot;</span>, got <span class="built_in">Number</span> <span class="keyword">with</span> value <span class="number">0.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为index是要写字符string数据，index是数字型，＋上一个空，转换成字符型即可</p><p>template标签不会被遍历生成</p><h3 id="bug12：iconfont-svg图标引用后不能用fill更改颜色"><a href="#bug12：iconfont-svg图标引用后不能用fill更改颜色" class="headerlink" title="bug12：iconfont svg图标引用后不能用fill更改颜色"></a>bug12：iconfont svg图标引用后不能用fill更改颜色</h3><blockquote><p><strong>用iconfont自带的批量去色功能解决</strong><br>今天在使用 Symbol 代码引用图标时发现，设置颜色后，有一部分图标还是显示原始的颜色。原来这部分 svg图标带有 fill 属性，这种图标不能本地修改 fill 属性，需要在项目中移除默认颜色。</p><p><img src="C:\Users\11449\AppData\Roaming\Typora\typora-user-images\image-20210207154320166.png" alt="image-20210207154320166"></p></blockquote><h3 id="bug13-v-if要在外层容器上"><a href="#bug13-v-if要在外层容器上" class="headerlink" title="bug13 v-if要在外层容器上"></a>bug13 v-if要在外层容器上</h3><p>v-for与v-if不能在同一层容器上</p><p>###bug14：背景色没有铺满屏幕</p><blockquote><p>导航栏高度设置了100vh，但是当高度很高时有滚动条时却没办法铺满屏幕，底部有空白，原因是因为我用了绝对定位！！！absolute，会相对于body’进行定位，要用fixed定位才会对！！好好想一想吧少年</p></blockquote><ul><li>左侧导航栏fixed定位，中间main区域absolute定位</li></ul><h3 id="bug15，返回数据多层次"><a href="#bug15，返回数据多层次" class="headerlink" title="bug15，返回数据多层次"></a>bug15，返回数据多层次</h3><p>修改数据||多层次||引用数据类型||直接修改||双向被修改</p><p>bug:switch按钮diabled状态都同时禁用启用</p><h3 id="bug16-分页按钮点击时候上一个多选框选中的会被清除"><a href="#bug16-分页按钮点击时候上一个多选框选中的会被清除" class="headerlink" title="bug16:分页按钮点击时候上一个多选框选中的会被清除"></a>bug16:分页按钮点击时候上一个多选框选中的会被清除</h3><h3 id="bug17-编辑按钮无法弹窗出来，最后写在一起变成函数调用才出现了"><a href="#bug17-编辑按钮无法弹窗出来，最后写在一起变成函数调用才出现了" class="headerlink" title="bug17 编辑按钮无法弹窗出来，最后写在一起变成函数调用才出现了"></a>bug17 编辑按钮无法弹窗出来，最后写在一起变成函数调用才出现了</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 新增</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">const</span> addNewUser = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// data.titleString = &quot;新增&quot;;</span></span><br><span class="line">   <span class="comment">// data.isVisible = true;</span></span><br><span class="line">   visible(<span class="string">&quot;新增&quot;</span>)</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//揉合成visible函数</span></span><br><span class="line"> <span class="keyword">const</span> visible = <span class="function">(<span class="params">title</span>) =&gt;</span> &#123;</span><br><span class="line">   data.titleString = title;</span><br><span class="line">   data.isVisible = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 编辑</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">const</span> editCurrent = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">   visible(<span class="string">&quot;编辑&quot;</span>)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>“<em>Node.js</em> 是服务器端的 JavaScript 运行环境,它具有无阻塞(non-blocking)和事件驱动(event-driven)等的特色,</p><p><a href="mailto:&#x32;&#48;&#x32;&#x31;&#x30;&#x32;&#x32;&#52;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#x32;&#48;&#x32;&#x31;&#x30;&#x32;&#x32;&#52;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a></p><p>shasha1992210</p><h3 id="Cannot-read-property-‘length’-of-undefined-问题解决思路"><a href="#Cannot-read-property-‘length’-of-undefined-问题解决思路" class="headerlink" title="Cannot read property ‘length’ of undefined 问题解决思路"></a>Cannot read property ‘length’ of undefined 问题解决思路</h3><p>一、排除 js 内的 所有的xxx.length 的 变量是否是数组类型。</p><p>二、排除 html 代码上是否引用过xxx.length 。</p><p>如果以上注释了排除还是报错的话。</p><p>还需要关注的就是 v-for ，因为代码再执行到  v-for=”(item,index) in arry”  这里时，如果arry不是个数组就会导致报错 xxxx.length 找不到，因为渲染的时候会内部运行 for 循环就会用到 xxx.length。这个是不能很快直观的能处理到的隐藏问题。</p><h3 id="bug19-使用elementUI中的el-checkbox"><a href="#bug19-使用elementUI中的el-checkbox" class="headerlink" title="bug19 使用elementUI中的el-checkbox"></a>bug19 使用elementUI中的el-checkbox</h3><p>使用elementUI中的el-checkbox遇上Cannot read property ‘length’ of undefined错误应该怎么办？</p><p>然后我感觉是因为层级太深的原因，然后报了8个关于checkbox的错误。<br>之后我把和chckbox绑定的数据放在了外层，然后就没有报错了。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
            <tag> vue </tag>
            
            <tag> 报错 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的防抖与节流</title>
      <link href="2020/10/02/debounce-throttle/"/>
      <url>2020/10/02/debounce-throttle/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3612378e11ff9ebad2c190437b02eaa0393dd082b8b3142202e2c9231b70030f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> web前端 </category>
          
          <category> 初级 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web开发中实现会话跟踪的常用技术方法</title>
      <link href="2020/03/08/http/"/>
      <url>2020/03/08/http/</url>
      
        <content type="html"><![CDATA[<p>由于http是无状态的协议，这种特性严重阻碍了客户端与服务器进行动态交互，例如购物车程序，客户在购物车中添加了商品，服务器如何知道购物车已有的物品呢？为了支持客户端与服务器之间的交互,为了弥补http的不足，目前实现会话跟踪的常用技术方法：cookie、session、url重写、隐藏input。</p><span id="more"></span><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>Cookie是客户端技术，程序把每个用户的数据以cookie的形式写给用户各自的浏览器。当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去。</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>Session 是存储在服务端的，并针对每个客户端（客户），通过SessionID来区别不同用户的。 该会话过程直到session失效（服务端关闭），或者客户端关闭时结束。相比cookie更安全，一般网站是session结合着cookie一起使用的</p><h3 id="url重写"><a href="#url重写" class="headerlink" title="url重写"></a>url重写</h3><p>客户程序在每个URL的尾部添加一些额外数据。这些数据标识当前的会话，服务器将这个标识符与它存储的用户相关数据关联起来。 URL重写是比较不错的会话跟踪解决方案，即使浏览器不支持 cookie 或在用户禁用 cookie 的情况下，这种方案也能够工作。 最大的缺点是每个页面都是动态的，如果用户离开了会话并通过书签或链接再次回来，会话的信息也会丢失，因为存储下来的链接含有错误的标识信息。</p><h3 id="隐藏input"><a href="#隐藏input" class="headerlink" title="隐藏input"></a>隐藏input</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haha&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交表单时，要将指定的名称和值自动包括在 GET 或 POST 数据中。这个隐藏域可以用来存储有关会话的信息，但它的主要缺点是：仅当每个页面都是由表单提交而动态生成时，才能使用这种方法。单击常规的超文本链接并 不产生表单提交，因此隐藏的表单域不能支持通常的会话跟踪，只能用于一系列特定的操作中，比如在线商店的结账过程。 </p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 初级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目过程中遇到的报错问题解决</title>
      <link href="2020/03/06/error/"/>
      <url>2020/03/06/error/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="175206f5468bebd9a2c33dd3c6f4c6500551465a48537b67ecb7e1531f3b76da">4630436162ade97ba2718b7d0c4b3b63d28f4f8957eafc94ae2cbc2b3019644774bec6f24125a977d2cbf54fedbe03a5f84bb5cb62ebdf5d27c316da0afebe5dbfae7d962ed22c5db0073f3f0cde7419b359e781f74aa6912011154432bc69699a0e3e24c360fc0660a82e3aa9e0830aa33d500761a4f198299a876c0f9b9787c29c5ff5a62aa4efc0eaa4c8148e9fe93df1ca021aba17ab86085ee6c7e02857f29bff5f6ef628ae6961257292504a060682c8e5c26b1c667b4e2655bd09f229ef36ac14226b2f3cb35a7a328a780b0a3ae1d2879d375e1ff33628be6e6b3c1138149d804e0a52b8780610ef406e27249ef08ef0b13e09d9184541762e1beb0dfeaef2f1f501d9f61ddbf965d3b274422262ee3640d6383959a491424c6b2c3ca336e9d8ed334675f671d2d58f3412513e46758a29522d2b9ac26b8e04b3f2d47c440c8cad78f86d47c2306b999fd2fe6464e5c5e710a00cafff72e32ae9c8d88b1515a8200cbc219772ab04f2ef76e2eaf868f00c6980c2aaca9a9c5cca9b3486e12076d259cd3e26dbaca180ea87c5d3d79bb078d1cd072e1787e39ae63632b71878aaba9634bdb47e2cf3d10d29d8391ac7e8b27c3fd49b89f5600381f8484d346230bc7a3945061f8a4d2733d1f5dc67469c8a2165c7abf7e746a3cea6f92f797b1ea0eee12080964237b0be8c9dcf6f6de7ca338428394775988e7c8dee0ea24e0e2c7a71c153761d238a129fba336a58ee056bac35dfbd8222c2fc7bea45440b68b74b95300f7ac6f31be26f97f9d0a1ed602e8d2b712deaa4513d30e59dfce0ff1a43bdb6ad97c3c35957a5b602c8b6676a9a62229ff5ab8868620b0721566656fe6d2167fa1f658379d6f5ec9c05445637478e54ef6096dc10c2dd1db3f7decb2ec7933373af61da2a5b923223dfbdbd2922fc56778fca1ff8f135f567238261b368770b555dccaf80a9d31f4ce74adb7785bbb484384e7ab57bd7f263ccf129148be6b6af87a6eafd269c5917a588783e5f3c2c15f6f8d6d31e10cf943b65da4f346c81abe8ccd21cabb1373f2c719937bf17fc5b27bebcd168358f8eedceade09045111dd94c0055d89a126f36e79eb4e08903e51f98024bb55b4c6c30236f1040346e1b326d45068f7cccd176ea20732cef6a73f8d941bce8a7bce57454f109d91f58f066d16747b6b2d4e210b8b0bddf251e0c79fc208b8520b6fe8bdab861e44b65028df415e8a7044a5b29de1190b3705d374c21aa7b2f8db6149ac429ada876b9701a1877efecb75d679e22e3a9771be7a855c29b8559e1effe6e05cae50baeb643ae29e66c5a61303377314db4a8666aee52e41234f9a7880050ec7870a0421963b65c557a3a7f3db6fce6c52887c3d5980e63d06f42d47bd8e30cf78c573800b6293c330c86e0040c47f97f32f0579db115f2433f6d3f76c0b327200aae58110abc19ad3413a3922ea5539a7dd10631cc2e77d8bc368c968c776106e345b321c9be8e3e901d31cb44b2571d729c8e81c42e3327e2f5a521a6588311a40a59388301e22b1d64bfba1a1a767a5f0d4b47306584c14937b9327e53d9ad95afdd0fa09be4dd72a6783818b054f3d0a7794abbe9323aa7e5c208c6ae69ccc8b3a4e708df6e02f4399ef295960ee3c318d861ae5c690081a32f4710788a290e31b7465aadd0888608123f661e65f76156a7e5867a96e27744f42325af9463a4e71025e6f941621af7b60482c8824aabbe56362e32d3a3929d02678734e67ea6d908470dcf5c4332da33db5833cf6af87c8a1b1156ac8d6d96cab184711338d3dee4683be307f6007ac9311f635e48ff2054cf667072ce340f778eed1a40809889ea780e4d2d293d6106f1957f2389982781d7d8800bf7f5b7375def82b497bdee113fe99831985d67abf79dd5f0feb92fc22c6afad3cca78e8d0783d93ab7e9ba7ddc375f0ddaa638314dbb4d040663b57a8c1b45a6fce4df353f371e74ad0a5553863d54d1645aa6da0dd45d80540dde0bebcbb8a566c056e5a9a48674c3e2efee6fbb571d51817684d116b709fe1163e5d2472eb80b406bb3e1e6ffbadfc4d1464e47159bb4f913ad99f32bd4d27cd7aadbc858ccede9427ad4d0966d9d52f53ff8193f309caa1d628d13b9238ac68891540a8e8dc951b16826f686917fbf81b8f6f5abf66034a0ec6097c6687f10d99bd101b3b17fb5a00a1ed4b5e73bf4cb9a6a0e70ab39cf40d1f66f0559de542a211499d88caad14653509ad7edac67be8ff0e52a89c607019905c89b38cd1500d09b7b3e16c00967d805031e6ad2ac8a1392b3380a1b996d332845a76b49651ebdd2c52e9977fa60b0e6dd44a67c9d31b2c091421aa0edd8c119db8f92f602195b61fb0b7c871ccea9467e384c76d676e83c0a74340056ce352ef67700ce739fd72f83f3dd16eec56dec3f7e096895961283ee0b4b8431db917b6e71d5e130583112b9d6b851106a0fd9b0968f965d38fac1e092b7ce75a0c3406192a153783649973a837d585a5bf3891d6143dbb99d0d16785342290e68a46d7b04790c5748feea742b82de9d3c2ed3f1b7073c0a6fa6149efe69a54100be33e7b300b222446470396ba0746e0145c4af19fa7829f6ca87c0b86eb7ea4348990a2ce57e627a65fdb8c6bf966453a02664ef600e8cc228db102e421490baf4b21a10ae351387f1c0e754edf40bc058378da0065505df03278dd7698d9add02d876be68318bdca149fbf11693ef459964a4e45db1bdc02e507be320bd613f7709772928c504a4121f71f510e88b792edff9ff1f4a14735bc72367ea39eac727f7bdf763221bc15cb8196d9f5744d64e901b4988a4a2e420712b23e5298b39530758a3ed8fb017a505d6aa5d89389a1cd68d92cb3bf11053202e5eec3ad37f9b672935af8c765343cea19ad9979520fb540b615ac3e72d4ceea29d10d2a36f6e23328512ffce7ab338643045e847f8ddad7d37727d052baed3458f2e607e331853153d3f9b6055403ae656620a9aca5e46e50d2f514614416b639e522b7e0777af578763d592a6dd80c57f51eb7f0116877c06a5cdcc2169685f125f2d48f82de4b42a13a0317dea6258d46ac90663a581e296c8e6944060ace622f488eb805ffc9bddb252891c468c5ce33b3bae8118bcbf8bd6bda004afba091ee0929a1cd3d9b41eb618caa5274714e6c66f454d8cfb6220252089749dfe6a873da1330f5f56d38473b99c527957161bbd330fe39ee629e734f304630ba87937539ee3e0291c2d88bda8cc45cf21d2acdf8339609fff6beba052bca59845482f12d5c4777bdef6ae6ff83e984d1feffce59399d9444c8bc4bc6fb367e39ec1c428fb1a43fd1d35e21ef6040e4c8bff35090277eda73b173c9eb3f6c4a44c8a84a3916801d99a5f1d5ecec604dcb20dd25918564760b6e270505e67d5ae96c90c9717b48441346486ffc43abd15bb9a3d89b36695ded1b8aae53fb5b8019b22bfbedb041be5e638a716e38d9b569bf53a912291168c19413c5cde9aeb666b7bc44b9b441b8642a846b0183fde526eac7ad107e8146d26aaaaee66c13815bd527885bcabec1096319b907abd42543d92134a825bf1e3ce84072b72fcab23431e5fbc336cc1724bba614a37c5153371b031e9975de044eeb7e9f97641ed526c7679d88a326bf9d6cdf94d079837e57f576649eea62eaf5c0018ddc9e37228338bc3e00816f9ae722b6b9632226040291921138a099a44cb7aadd0d9c53353839acd0f32fbb839ad4d6b6e5376a7967bc044771d87b058fabc754df40434543e8790dd1d9f889029b28f08b0e8663697f5cbaabae0360f1f2aff5be0b0a6641f1409dd2384ef823a5400c01161cc7ad07ffed3a47f7991c36744f1c13a45239654ab549416ceebb684e3b3c797e31f4923e2b577bd9a308db90c766efc174deea915d930c64b941f4c3ffffb38657ede2bed6a1edbef0383760e76fa1f5d0b35e701fc7a7585caf576ca354308c632c77f83a3eda5b37ee8ef70a7ba4bc00cd6b08dbc3c69dae985c1f6e5559fa94bcc45dca93776beb4908b3c5b1cb20eb644bc30f8fff74a480c53923517e92ce36b5cafe6f525691d9bb145a7867f9ccfd7042746b17070358670376aa6666e81af76a2ef3b4a6e7b7bf7c228b8979c18ccfb01e6f7f904dc280bc31f0eec8aea4960fc597a1fb9ae51822a0ca52888ba1b9c70393b8c008cdd3ae4c7f22950bd8091d34901746e34e9baced691f1c4de3562582320c2ba6f785834e047d60ec33684c823953c49e062480c9db9373e230e6264065947d68d8fbc21002a0740c52dd58c50d386da07ffdc3e3e520f85b2b6a7dee4e7898ef344f61ef43548a239656a7f9fa791fe898ad4c38625c61224d24f95447497fe74c0ecfc25ba5d1a19ba4bd7782db1ec90d6fdc7d9fe48d7127f213b2cbfd8a069ecb1ae6d2b477c21eacca6297bcf234edbaf13977ed3700d25dbfc51cb5ee935927b710a015a26371ce901875c3131edcfa91cf0aee6e53c33db18382e79c73307abe58fb8622cdd83f92d0ed8483542846d69f96fb726db60a7bb5a6033853188ce813eb692aa627225385ad0755a379919bd7724482d0169a596939d628b6d8bf23afde2105462581152cd83763468e2a138c3935f93d18cd1d870711011bc4867ea10e679ec8d2471b1f212da9b4dc8e322347ac0c4fe124a7cadb86eb0c85fddd00bb9159b3dae04b4bc80d2d1653bc9d9ee7a5f9a31cd8a805184064d644d4bc6826839586a782faaf08e49462526fe85f08a9195629a49ec93d56a7d54030920b84e0f0289b0a159056de217898ec2fc8b0a2c7ecc64d0847521bd55a563a12a50ab80d47c78539780ce666eaf7f5cd97beecab1b9005bfc4d4ff15170bfa3358141264b74840c2b91a902a1eb933d5530942ccf254b9f8dee7aa49dcba1a91f67bebab066e8f016e87e2ad581581fe8cc7e4edcf5274b1157c7798d5ba6e4d2b2fc8f9b9662a3461b5b04501216323008e64e1883e2c89d09d24bad110f00b6552e2ed8cc570df7707f0c9c6a6fb978d009192fadc78a1c5331b09a6236ac07d7a9a4406c07829cb7449de278043019ecf30dc269d585c70afdc01eb6160b99162f81901edffe4b58e8e5a567b7d4d1debc2d7c2367a5fb8582051a423057e47ffe65d004979730a86c427ac5386d5a2cc89f2ca998d02e3c437b30f7de8e7b7b48141b3c24906d1d75b3bfd9b6751d63b37964403c381d1e7085eaa4662392b7486e91b708e41daf362aee53f87f399d638ff6d0cfe0e839f0dc32e1f7538176eaa4a3d7dd483103a9af874046b77dc1cc9d37f224127bd77906eafd48caf523aeb3aac3459bb816e4d3934ead02dba3a7bc2cd958e735f9c43142e5d8728f4bf18a39e39c4ce803a85e37ba519972ed02c033643556802a2c8d87ad21db417f4c16d3a3a7c0925f757758d44ee6ba3ee76eb5ef7684d4dc25ff60e6edeff59256a5e3b3ad633d5f65a0439c830bc648e2b5cde04722b83138b3475fa9330579092a3b13fcced843e99da455d4c03a1c9c905e84c274f17a1764b0a97e6fee1d58df229cc8fdc26c5fd228858a618c68d7715d10b176363cec68d208913b3565836f2e7d58bf7dcb4b6a47cf6387928c39fbbfa87c2ea0773cb13a26bf667ebfb6c39d8ce688c0393c0b0880bbceea803e72df21942e3b07441e17410d340b816c2aa3445493e004e5cde396a53b9ad4c1524ed80b35e7faf5f4b14126a27e3eb963c3892e102accb573094c9c0e03ef14b6f17b753a9ecbb5dbf5196f1ddf86017fbcb69806af1ef4c1c395e1a1c4ec400af73d385b63f4eca23f50946e769f682394351e0486d739c8218aecd5396cd9a767696f152633b4470b6bad6b0112d22812d137afd2402d9ebe6afb7b65ab350647126ba2b359db027fcaf6e08b6991c25818703c7c780ef9ca48b4fe3125532e7b092843191662eae4f53c243c87ef3fb2a0d5e931b5954a78acf7994a1a0b777222c74541a4701c6edcfe0e37182fc555931abbe2604656b3fab323250bbb37575451390bed642d7eeed614d764dee543f3d0306128cd4e276661a08ed2bb5da84b8932f83c169d754e7489bf833094284336c11a806f45670928873ee76a06bddd462dd859a45fd5eb6152924f7b75192119f2d5558ebf1d312ef7e7d458319d1a9c8ae4ecb610b0b8f4dbda5a15ce76b0d20d571112c4b651a140f7b0e6b9bb4214c87e7c4639289133e8aae5032e2349ceff91150711daa9075ace95f830f05432315c1c2193655d65de700d6d0001992c469df3a498f3e2cd32c4049c83a1eeb002d7c009f2630a18226ce4d8f4e4e6caaf3cccf693b70401a6ed67bbd0e55705b2b0b37534b544114b18cab955b24a2beeed0dbdc8428277cc92c514a85428d8d5a5491a0ee318442e0bbf751f321a14dac22624d80dd5bc78a2383e8d72a8e78a49d65fc265c016acfccd38672c88bd464379f2d08a37f4e38037e5cb94bfede6d502b1e43c971585f60bc9f2d427805926f28aa68e0a825b6ab96eda96caa1e3b96e4fae8e66be18a7fdb382c96a7b20e48e8de3cadb7c23301a851ec9b88c8313ed9aa01d9709c6d26a85602a108272e3300ef9a95a5e68cb42d82334eb6cea5240859a0347121a2496c8da3a00f64c5a782f0a239b2e39276c8948efb98e4d1dc44148abe82c564cd68f2babbd5f725c4dd0d68b47182834a0272c9c14317b31387c4e54ebcd377bb2c880d6bb6e64c068ce38f7ee5577399488f85796914f70a2fce4f84c2ff23383619c90417514cd9e9348a045b527431e3a9a3d47bcda898f284791015d5f93f1d52688d5f45c6612445452c8a25870d231852a92cdaead3b69ad01e21695ddb655d75981d96609a8e40a15375d10e792db3e911c0a126a0d28062bd03262324c92ad9053347c71e7a7ca8ab59d55fc4d450334ee4455553efe3a9fed9898a56d529c837e3f32bcb73e999ca811a1b5cb4b742629c3121cc570bf0a8158b4fcb0af3cbf5fc7b41c90dca46bbd128fd90d6f8ef2ab35095b51f082d7ad386bc60942a9e0667fa7a6b52f728895b294736c85a900557c7c6541a3a525806c72200698a18036d6abcbef1cba46eb180a727a25471e7e5568c93c2cb03a042a9c38369c37c2100571fc7f9e4e142379e5da261f5f14b484869a660ff03224605248dfc59aff22145cab3c61ac29015799c6cbf987edfd8870354178cd2daffd570dceefab9aa715f8d62dc23703271d544e45b13b4b48cfc5615c594a095f3da9a6cbbd632b71ff90fc9bf5dfdc67fc17da59fc9ce7e9b9506370ce5e1a5312a17f4a199c8180f773f981e8e72633ab5042a30d729afa540404cd46baa3a1e144d0025a68f2a8c0b8a724dc9c35903d560bf795891a0a76127491e99af8461daa13ae69f73a06e98afd6f79ed59b2ee34bc47b13533804b61ed56e25968775e76b6de49a1386484904607a10cf5a5e0ba08f7b04b53cbfce32bc85667f9040f4bf8457c527f1e762ca20eda85822853dcd34a31ea5f940d0c457923ec6b9403186134989fa8d863935f1665b9810a45f5cf6ff67ed51be4f3b53fcb97960a731174b3240f98c46353ea7d7f717c990677d3a91d96a6be434140df9d813f9ed17dc5dc381802ee3bf4a9d91464801d34c05faae1a960def525bcba62ec57e997c4f5880a8160cc045a49d13ab7e27fd8f4b7b0ef99f78a0be75959bf82b661fcfa8b55673745ab84a3c2f3407ff9ecf160d36508889ef85a9fa34dddb4c5856bd68517945ab02358f63d30ee5277b9c8db42b52a3693c6f1d6626c1153e12ef767d11c59235d6d62388b4be3666ee34a258c1ddb126dfc108fa1a9be5f5f9a26673a8e0da1db19f46c220d391bfcc995209766bec222f16593072b0c6161ecf4eb6f2aa8c8c4fd05d1649a7a614732d95de65e227806f143c196ea4673af58233ea9ba2dbb503dfbf2e61ee06b5a681c8aa4e27265f3adae4ac3c9bfb88cda6a5cdeef1aeacd4ff601a6d0c281b5ec6d168e2cf16d913584967cfc1388164a5d080ef0451630734d342e77d3c2fad3bb3c0c90f18cc33356e53cc81f410e1e65eba8a55e17e351814b6e97370467e6a273cf2699417b9213f8c14d387c9ebf24214c091aaa9b170c4b73111174e947a207813b700f7d62843f11bdaf99ab467c1cf9fa1eaab5c925742ce0f3629f99fd864279a105e7ab42881781bca2ebb216f74c76ec457c127175508933505f437ca19ada2c5ed26d7dc2ff64f4f76cc7f9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
            <tag> 移动端 </tag>
            
            <tag> vue </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli快速构建项目</title>
      <link href="2020/02/27/program/"/>
      <url>2020/02/27/program/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存机制强缓存与协商缓存</title>
      <link href="2020/02/26/06_%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>2020/02/26/06_%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="1-缓存理解"><a href="#1-缓存理解" class="headerlink" title="1. 缓存理解"></a>1. 缓存理解</h2><ol><li>缓存定义:<ol><li>浏览器在本地磁盘上将用户之前请求的数据存储起来，当访问者再次需要改数据的时候无需再次发送请求，直接从浏览器本地获取数据</li></ol></li><li>缓存的好处:<ol><li>减少请求的个数</li><li>节省带宽，避免浪费不必要的网络资源</li><li>减轻服务器压力</li><li>提高浏览器网页的加载速度，提高用户体验</li></ol></li></ol><h2 id="2-缓存分类"><a href="#2-缓存分类" class="headerlink" title="2. 缓存分类"></a>2. 缓存分类</h2><ol><li>强缓存<ol><li>不会向服务器发送请求，直接从本地缓存中获取数据</li><li>请求资源的的状态码为: 200 ok(from memory cache)</li></ol></li><li>协商缓存<ol><li>向服务器发送请求，服务器会根据请求头的资源判断是否命中协商缓存</li><li>如果命中，则返回304状态码通知浏览器从缓存中读取资源</li></ol></li><li>强缓存 &amp; 协商缓存的共同点<ol><li>都是从浏览器端读取资源</li></ol></li><li>强缓存 VS 协商缓存的不同点<ol><li>强缓存不发请求给服务器</li><li>协商缓存发请求给服务器，根据服务器返回的信息决定是否使用缓存</li></ol></li></ol><h2 id="3-缓存使用示意图"><a href="#3-缓存使用示意图" class="headerlink" title="3. 缓存使用示意图"></a>3. 缓存使用示意图</h2><p><img src="https://s2.ax1x.com/2019/06/17/V7f829.png"></p><h2 id="4-缓存中的header参数"><a href="#4-缓存中的header参数" class="headerlink" title="4. 缓存中的header参数"></a>4. 缓存中的header参数</h2><h3 id="1、强缓存的header参数"><a href="#1、强缓存的header参数" class="headerlink" title="1、强缓存的header参数"></a>1、强缓存的header参数</h3><hr><ol><li>expires：<ol><li>这是http1.0时的规范；它的值为一个绝对时间的GMT格式的时间字符串，如<code>Mon, 10 Jun 2015 21:31:12 GMT</code>，如果发送请求的时间在expires之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源</li></ol></li><li>cache-control：max-age=number<ol><li>这是http1.1时出现的header信息，主要是利用该字段的max-age值来进行判断，它是一个相对值；资源第一次的请求时间和Cache-Control设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；</li><li>cache-control常用的值（做一个简单了解即可）：</li><li>no-cache: 不使用本地缓存，需要使用协商缓存。先与服务器确认返回的响应是否被更改，如果之前的响应中存在Etag，那么请求的额时候会与服务器端进行验证，如果资源为被更改则使用缓存。</li><li>no-store: 直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</li><li>public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。</li><li>private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。</li><li><font color=red>注意：当cache-control与Expires共存的时候cache-control的优先级高</font></li></ol></li></ol><h3 id="2、协商缓存的header参数"><a href="#2、协商缓存的header参数" class="headerlink" title="2、协商缓存的header参数"></a>2、协商缓存的header参数</h3><hr><p>  <font color=red> 重点：协商缓存都是由服务器来确定缓存资源是否可用的，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问</font></p><ul><li>Last-Modified/If-Modified-Since:二者的值都是GMT格式的时间字符串</li></ul><ol><li> 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified的header，这个header表示这个资源在服务器上的最后修改时间</li><li>浏览器再次跟服务器请求这个资源时，在request的header上加上If-Modified-Since的header，这个header的值就是上一次请求时返回的Last-Modified的值</li><li>服务器再次收到资源请求时，根据浏览器传过来If-Modified-Since和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回304 Not Modified的响应时，response header中不会再添加Last-Modified的header，因为既然资源没有变化，那么Last-Modified也就不会改变，这是服务器返回304时的response header</li><li>浏览器收到304的响应后，就会从缓存中加载资源</li><li>如果协商缓存没有命中，浏览器直接从服务器加载资源时，Last-Modified的Header在重新加载的时候会被更新，下次请求时，If-Modified-Since会启用上次返回的Last-Modified值</li><li>图例：<img src="https://i.imgur.com/GZqqDbS.png"></li></ol><hr><ul><li>Etag/If-None-Match<ol><li>这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变</li><li>其判断过程与Last-Modified/If-Modified-Since类似</li></ol></li></ul><hr><ul><li>既生Last-Modified何生Etag<ol><li>HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题</li><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ol></li></ul><hr><ul><li><p>小结：</p><ul><li><p>利用Etag能够更加准确的控制缓存，因为Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。</p></li><li><p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> 初级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo next搭建博客遇到的问题</title>
      <link href="2019/12/26/hello-world/"/>
      <url>2019/12/26/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><p>最近开始基于hexo和next搭建个人博客，中途遇到了一堆的bug以及相关的优化问题，想写这篇文章记录下。</p><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>在编辑 站点配置文件 时， 将 language 按照hexo 的官方文档设置语言,但不生效。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="string">//</span> <span class="string">这里设置语言</span> <span class="string">简体中文</span></span><br></pre></td></tr></table></figure><p>查看hexo-theme-next/languages/目录下是否有zh-Hans.yml 文件.一般是有zh-CN.yml ,所以要把zh-CN.yml文件改成名字为zh-Hans.yml就可以了<br>————————————————</p><span id="more"></span><h3 id="设置标题-作者-描述"><a href="#设置标题-作者-描述" class="headerlink" title="设置标题/作者/描述"></a>设置标题/作者/描述</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">草原森林</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;一片两片三四片，五片六片七八片，鸡鸭鹅，牛羊猪&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;现在开始种树啦&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">一棵树</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>按照官方文档设置，但均不生效，在命令行输入以下命令就解决了这个问题，因为是静态文件，所以可能是由于缓存的原因</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清理静态文件</span><br><span class="line">hexo g //生成静态文件</span><br><span class="line">hexo d //部署</span><br></pre></td></tr></table></figure><h3 id="部署时报错"><a href="#部署时报错" class="headerlink" title="部署时报错"></a>部署时报错</h3><p>在命令行工具中输入hexo d进行部署时报以下错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: <span class="built_in">Error</span>: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\sblog\songssBlog\node_modules\hexo-util\lib\spawn.js:<span class="number">51</span>:<span class="number">21</span>)</span><br><span class="line">      at ChildProcess.emit (events.js:<span class="number">315</span>:<span class="number">20</span>)</span><br><span class="line">      at ChildProcess.cp.emit (D:\sblog\songssBlog\node_modules\cross-spawn\lib\enoent.js:<span class="number">34</span>:<span class="number">29</span>)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:<span class="number">277</span>:<span class="number">12</span>) &#123;</span><br><span class="line">    code: <span class="number">128</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>解决办法：部署时hexo clean一次</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h4 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate  或者 hexo s 常用参数：-p（--port）重设端口</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h4 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy 可简写为hexo d，用于将网站部署到服务器上。</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h4 id="发布文章之后的操作"><a href="#发布文章之后的操作" class="headerlink" title="发布文章之后的操作"></a>发布文章之后的操作</h4><p>一般发布文章或者修改博客后需要这些操作：清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
